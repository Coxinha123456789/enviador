# No arquivo: paginas/pagina1.py (Vers√£o Corrigida)

import streamlit as st
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from PIL import Image
import io
import google.generativeai as genai
from datetime import datetime
from utils import conectar_firebase

# --- Imports movidos para o topo ---
from google.api_core.exceptions import Forbidden

# --- Configura√ß√£o da p√°gina ---
st.set_page_config(layout="centered", page_title="Envio com IA")

# -----------------------------------------------------------------------------
# FUN√á√ïES AUXILIARES (movidas para o topo para melhor organiza√ß√£o)
# -----------------------------------------------------------------------------

def analyze_image_with_gemini(image_bytes):
    """Analisa uma imagem usando o Gemini e retorna uma descri√ß√£o."""
    try:
        model = genai.GenerativeModel(model_name='gemini-2.5-flash')
        image_pil = Image.open(io.BytesIO(image_bytes))
        prompt = "Descreva o que voc√™ v√™ nesta imagem, de forma objetiva, com no m√°ximo 3 linhas."
        response = model.generate_content([prompt, image_pil])
        return response.text
    except Exception as e:
        st.error(f"Erro ao contatar a API de IA: {e}")
        return None

def send_emails(sender, password, supervisor, collaborator, subject, body, image_bytes, image_name):
    """Envia e-mails para o supervisor (com anexo) e colaborador (confirma√ß√£o)."""
    try:
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(sender, password)

        # --- E-mail para o Supervisor ---
        msg_supervisor = MIMEMultipart()
        msg_supervisor['From'] = sender
        msg_supervisor['To'] = supervisor
        msg_supervisor['Subject'] = subject
        msg_supervisor.attach(MIMEText(body, 'plain'))
        # Anexa a imagem corretamente
        image = MIMEImage(image_bytes, name=image_name)
        msg_supervisor.attach(image)
        server.sendmail(sender, supervisor, msg_supervisor.as_string())

        # --- E-mail de Confirma√ß√£o para o Colaborador ---
        msg_collaborator = MIMEMultipart()
        msg_collaborator['From'] = sender
        msg_collaborator['To'] = collaborator
        msg_collaborator['Subject'] = "Confirma√ß√£o de Envio de Imagem"
        body_collaborator = "Ol√°,\n\nEste √© um e-mail de confirma√ß√£o. Sua imagem e a an√°lise da IA foram enviadas com sucesso para o seu supervisor.\n\nAtenciosamente,\nSistema Autom√°tico"
        msg_collaborator.attach(MIMEText(body_collaborator, 'plain'))
        server.sendmail(sender, collaborator, msg_collaborator.as_string())
        
        server.quit()
        return True, "E-mails enviados com sucesso!"
    except Exception as e:
        return False, f"Ocorreu um erro ao enviar os e-mails: {e}"

# -----------------------------------------------------------------------------
# L√ìGICA PRINCIPAL DO APP
# -----------------------------------------------------------------------------

# 1. CORRE√á√ÉO: Chamar a fun√ß√£o e desempacotar os DOIS valores
db = conectar_firebase()
colecao = 'ColecaoEnviados'

# --- Carregamento de Segredos ---
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    EMAIL_SENDER = st.secrets["EMAIL_SENDER"]
    EMAIL_PASSWORD = st.secrets["EMAIL_PASSWORD"]
    SUPERVISOR_EMAIL = st.secrets.get("SUPERVISOR_EMAIL")
    genai.configure(api_key=GOOGLE_API_KEY)
except Exception as e:
    st.error(f"Erro fatal ao carregar segredos: {e}. Verifique o arquivo secrets.toml.")
    st.stop()

# --- Verifica√ß√£o de Login ---
if not (hasattr(st, "user") and getattr(st.user, "is_logged_in", False)):
    st.warning("Fa√ßa login para continuar.")
    st.stop()

# --- Interface Principal ---
collaborator_email = getattr(st.user, "email", "n√£o identificado")
st.title("üì§ App de Envio de Imagem")
st.write(f"Voc√™ est√° logado como: **{collaborator_email}**")
st.write("Fa√ßa o upload de uma imagem para envi√°-la ao seu supervisor com uma an√°lise autom√°tica.")

uploaded_file = st.file_uploader("Escolha uma imagem", type=["png", "jpg", "jpeg"])

if uploaded_file is not None:
    image_bytes = uploaded_file.getvalue()
    st.image(image_bytes, caption=f"Imagem a ser enviada: {uploaded_file.name}", use_container_width=True)
    st.divider()

    st.subheader("ü§ñ An√°lise da Imagem por IA")
    with st.spinner("Analisando a imagem..."):
        ai_description = analyze_image_with_gemini(image_bytes)
    
    if ai_description:
        st.text_area("Descri√ß√£o gerada:", value=ai_description, height=150, disabled=True)
        
        if st.button("üöÄ Enviar para Supervisor"):
            with st.spinner("Enviando e salvando..."):
                # Prepara os dados do e-mail
                email_subject = f"Nova Imagem Recebida de {collaborator_email}"
                email_body = f"""Ol√°,\n\nUma nova imagem foi enviada pelo colaborador {collaborator_email}.\n\nDescri√ß√£o da imagem (IA):\n--------------------------------------------------\n{ai_description}\n--------------------------------------------------\n\nAtenciosamente,\nSistema Autom√°tico"""

                # 1. Envia os e-mails
                email_ok, email_msg = send_emails(
                    EMAIL_SENDER, EMAIL_PASSWORD, SUPERVISOR_EMAIL, collaborator_email,
                    email_subject, email_body, image_bytes, uploaded_file.name
                )

                if email_ok:
                    # 2. Se os e-mails foram enviados, tenta salvar no Firebase
                    try:
                        # 2. CORRE√á√ÉO: Usa o objeto 'bucket' que j√° temos da conex√£o
                        blob = bucket.blob(f"envios/{collaborator_email}/{uploaded_file.name}")
                        blob.upload_from_string(image_bytes, content_type=uploaded_file.type)
                        
                        # 3. ALERTA: Esta linha requer permiss√£o de "Storage Object Admin"
                        # Se n√£o for necess√°rio que todos na internet vejam o arquivo,
                        # considere usar blob.generate_signed_url() em vez de .make_public()
                        blob.make_public()
                        image_url = blob.public_url

                        # Salva as informa√ß√µes no Firestore
                        user_ref = db.collection(colecao).document(collaborator_email)
                        doc = user_ref.get()
                        dados = doc.to_dict() if doc.exists else {}
                        novo_envio = {
                            "descricao": ai_description,
                            "nome_arquivo": uploaded_file.name,
                            "data_envio": datetime.now(),
                            "url_imagem": image_url
                        }
                        dados.setdefault('envios', []).append(novo_envio)
                        user_ref.set(dados)

                        st.success(f"{email_msg} Registro salvo com sucesso!")
                        st.balloons()

                    except Forbidden:
                        st.error("E-mails enviados, mas falha ao salvar a imagem! A conta de servi√ßo n√£o tem permiss√£o para tornar arquivos p√∫blicos. Verifique as permiss√µes IAM no Google Cloud.")
                    except Exception as e:
                        st.error(f"E-mails enviados, mas falha ao salvar no banco de dados: {e}")
                else:
                    st.error(f"Falha no envio de e-mails: {email_msg}")
